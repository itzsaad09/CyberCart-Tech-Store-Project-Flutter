on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master

name: "Build & Release"

jobs:
  build:
    name: Build & Release
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.TOKEN }} # needed to push back version changes

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          architecture: x64

      # âœ… Step 1: Increment patch version only
      - name: Bump patch version in pubspec.yaml
        id: bump_version
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | awk '{print $2}')
          BASE=$(echo "$CURRENT_VERSION" | cut -d'+' -f1)
          BUILD=$(echo "$CURRENT_VERSION" | cut -d'+' -f2)

          if [ -z "$BUILD" ]; then
            BUILD=1
          fi

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE"
          PATCH=$((PATCH + 1))

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "New version: $NEW_VERSION"

          # Update version in pubspec.yaml
          sed -i.bak "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          rm pubspec.yaml.bak

          # Save to outputs
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # âœ… Step 2: Commit & push updated version
      - name: Commit version bump
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add pubspec.yaml
          git commit -m "ðŸ”– Bump version to ${{ steps.bump_version.outputs.version }}"
          git push

      # âœ… Step 3: Build Android APK
      - name: Build Android APK
        run: flutter build apk --release --split-per-abi

      - name: Rename APK files
        run: |
          mkdir -p build/release-artifacts
          VERSION=${{ steps.bump_version.outputs.version }}
          for file in build/app/outputs/flutter-apk/*.apk; do
            cp "$file" "build/release-artifacts/CyberCart-${VERSION}-$(basename "$file")"
          done

      # âœ… Step 4: Build iOS IPA
      - name: Build iOS IPA
        run: |
          flutter build ios --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          mv Runner.app Payload/
          zip -r app.ipa Payload
          VERSION=${{ steps.bump_version.outputs.version }}
          mv app.ipa ../../release-artifacts/CyberCart-${VERSION}.ipa

      # âœ… Step 5: Create GitHub Release
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/release-artifacts/*"
          tag: "v${{ steps.bump_version.outputs.version }}"
          name: "CyberCart v${{ steps.bump_version.outputs.version }}"
          token: ${{ secrets.TOKEN }}
